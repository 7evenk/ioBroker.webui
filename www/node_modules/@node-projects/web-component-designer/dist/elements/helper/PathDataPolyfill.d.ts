import { IPoint } from "../../interfaces/IPoint.js";
export {};
declare type PathDataM = {
    type: 'M' | 'm';
    values: [x: number, y: number];
};
declare type PathDataL = {
    type: 'L' | 'l';
    values: [x: number, y: number];
};
declare type PathDataT = {
    type: 'T' | 't';
    values: [x: number, y: number];
};
declare type PathDataH = {
    type: 'H' | 'h';
    values: [x: number];
};
declare type PathDataV = {
    type: 'V' | 'v';
    values: [y: number];
};
declare type PathDataZ = {
    type: 'Z' | 'z';
    values?: [];
};
declare type PathDataC = {
    type: 'C' | 'c';
    values: [x1: number, y1: number, x2: number, y2: number, x: number, y: number];
};
declare type PathDataS = {
    type: 'S' | 's';
    values: [x2: number, y2: number, x: number, y: number];
};
declare type PathDataQ = {
    type: 'Q' | 'q';
    values: [x1: number, y1: number, x: number, y: number];
};
declare type PathDataA = {
    type: 'A' | 'a';
    values: [rx: number, ry: number, ang: number, flag1: 0 | 1, flag2: 0 | 1, x: number, y: number];
};
declare type PathData = {
    type: string;
} & (PathDataM | PathDataL | PathDataH | PathDataV | PathDataZ | PathDataC | PathDataS | PathDataQ | PathDataT | PathDataA)[];
export declare function straightenLine(p1: IPoint, p2: IPoint): IPoint;
export declare function calculateNormLegth(p1: IPoint, p2: IPoint): number;
export declare function calculateAlpha(p1: IPoint, p2: IPoint): number;
export declare function moveSVGPath(path: SVGPathElement, xFactor: number, yFactor: number): string;
declare global {
    interface SVGGraphicsElement {
        getPathData(options?: {
            normalize?: boolean;
        }): PathData[];
        isPointInStroke(point: {
            x: number;
            y: number;
        }): any;
        isPointInFill(point: {
            x: number;
            y: number;
        }): any;
    }
    interface SVGPathElement {
        getPathData(options?: {
            normalize?: boolean;
        }): PathData[];
        setPathData(pathData: PathData[]): any;
    }
    interface SVGRectElement {
        getPathData(options?: {
            normalize?: boolean;
        }): PathData[];
    }
    interface SVGCircleElement {
        getPathData(options?: {
            normalize?: boolean;
        }): PathData[];
    }
    interface SVGEllipseElement {
        getPathData(options?: {
            normalize?: boolean;
        }): PathData[];
    }
    interface SVGLineElement {
        getPathData(options?: {
            normalize?: boolean;
        }): PathData[];
    }
    interface SVGPolylineElement {
        getPathData(options?: {
            normalize?: boolean;
        }): PathData[];
    }
    interface SVGPolygonElement {
        getPathData(options?: {
            normalize?: boolean;
        }): PathData[];
    }
}
