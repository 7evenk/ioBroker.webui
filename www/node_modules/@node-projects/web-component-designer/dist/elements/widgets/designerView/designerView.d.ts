import { ServiceContainer } from '../../services/ServiceContainer';
import { InstanceServiceContainer } from '../../services/InstanceServiceContainer';
import { BaseCustomWebComponentConstructorAppend } from '@node-projects/base-custom-webcomponent';
import { IUiCommandHandler } from '../../../commandHandling/IUiCommandHandler';
import { IUiCommand } from '../../../commandHandling/IUiCommand';
import { DesignerCanvas } from "./designerCanvas.js";
import { IDesignItem } from '../../item/IDesignItem.js';
import { IStringPosition } from '../../services/htmlWriterService/IStringPosition.js';
export declare class DesignerView extends BaseCustomWebComponentConstructorAppend implements IUiCommandHandler {
    private _sVert;
    private _sHor;
    get serviceContainer(): ServiceContainer;
    set serviceContainer(value: ServiceContainer);
    get instanceServiceContainer(): InstanceServiceContainer;
    set instanceServiceContainer(value: InstanceServiceContainer);
    private _designerCanvas;
    get designerCanvas(): DesignerCanvas;
    private _zoomInput;
    private _lowertoolbar;
    static readonly style: CSSStyleSheet;
    static readonly template: HTMLTemplateElement;
    constructor();
    private _onScrollbar;
    private _onWheel;
    get designerWidth(): string;
    set designerWidth(value: string);
    get designerHeight(): string;
    set designerHeight(value: string);
    set additionalStyle(value: CSSStyleSheet);
    setDesignItems(designItems: IDesignItem[]): void;
    executeCommand(command: IUiCommand): Promise<void>;
    canExecuteCommand(command: IUiCommand): boolean;
    initialize(serviceContainer: ServiceContainer): void;
    getHTML(designItemsAssignmentList?: Map<IDesignItem, IStringPosition>): string;
    parseHTML(html: string): Promise<void>;
    static wrapInDesigner(elements: HTMLCollection | HTMLElement[], serviceContainer: ServiceContainer): DesignerCanvas;
}
