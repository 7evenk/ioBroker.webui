import { ServiceContainer } from '../../services/ServiceContainer';
import { InstanceServiceContainer } from '../../services/InstanceServiceContainer';
import { IDesignItem } from '../../item/IDesignItem';
import { BaseCustomWebComponentLazyAppend, TypedEvent } from '@node-projects/base-custom-webcomponent';
import { IDesignerCanvas } from './IDesignerCanvas';
import { Snaplines } from './Snaplines';
import { ContextMenuHelper } from '../../helper/contextMenu/ContextMenuHelper';
import { IPlacementView } from './IPlacementView';
import { IUiCommandHandler } from '../../../commandHandling/IUiCommandHandler';
import { IUiCommand } from '../../../commandHandling/IUiCommand';
import { IExtensionManager } from "./extensions/IExtensionManger";
import { IPoint } from "../../../interfaces/IPoint";
import { OverlayLayer } from "./extensions/OverlayLayer";
import { OverlayLayerView } from './overlayLayerView';
import { IRect } from "../../../interfaces/IRect.js";
export declare class DesignerCanvas extends BaseCustomWebComponentLazyAppend implements IDesignerCanvas, IPlacementView, IUiCommandHandler {
    serviceContainer: ServiceContainer;
    instanceServiceContainer: InstanceServiceContainer;
    containerBoundingRect: DOMRect;
    outerRect: DOMRect;
    gridSize: number;
    alignOnGrid: boolean;
    alignOnSnap: boolean;
    snapLines: Snaplines;
    overlayLayer: OverlayLayerView;
    rootDesignItem: IDesignItem;
    eatEvents: Element;
    private _zoomFactor;
    private _scaleFactor;
    private _canvasOffset;
    get zoomFactor(): number;
    set zoomFactor(value: number);
    get scaleFactor(): number;
    get canvasOffset(): IPoint;
    set canvasOffset(value: IPoint);
    onContentChanged: TypedEvent<void>;
    private _canvas;
    private _canvasContainer;
    private _outercanvas2;
    private _lastHoverDesignItem;
    private _onContextMenuBound;
    private _pointerEventHandlerBound;
    private _firstConnect;
    private _onKeyDownBound;
    private _onKeyUpBound;
    static readonly style: CSSStyleSheet;
    static readonly template: HTMLTemplateElement;
    extensionManager: IExtensionManager;
    private _pointerextensions;
    private _onDblClickBound;
    constructor();
    get designerWidth(): string;
    set designerWidth(value: string);
    get designerHeight(): string;
    set designerHeight(value: string);
    set additionalStyle(value: CSSStyleSheet);
    executeCommand(command: IUiCommand): Promise<void>;
    canExecuteCommand(command: IUiCommand): boolean;
    handleSelectAll(): void;
    handleCopyCommand(): Promise<void>;
    handlePasteCommand(): Promise<void>;
    handleDeleteCommand(): void;
    initialize(serviceContainer: ServiceContainer): void;
    elementFromPoint(x: number, y: number): Element;
    connectedCallback(): void;
    zoomFactorChanged(): void;
    _updateTransform(): void;
    setDesignItems(designItems: IDesignItem[]): void;
    addDesignItems(designItems: IDesignItem[]): void;
    private _onDragEnter;
    private _onDragLeave;
    private _onDragOver;
    private _onDrop;
    private _onContextMenu;
    showDesignItemContextMenu(designItem: IDesignItem, event: MouseEvent): ContextMenuHelper;
    private _onDblClick;
    private onKeyUp;
    private onKeyDown;
    getNormalizedEventCoordinates(event: MouseEvent): IPoint;
    getNormalizedElementCoordinates(element: Element): IRect;
    getNormalizedOffsetInElement(event: MouseEvent, element: Element): IPoint;
    getElementAtPoint(point: IPoint, ignoreElementCallback?: (element: HTMLElement) => boolean): HTMLElement;
    _rect: SVGRectElement;
    private _pointerEventHandler;
    private _fillCalculationrects;
    addOverlay(element: SVGGraphicsElement, overlayLayer?: OverlayLayer): void;
    removeOverlay(element: SVGGraphicsElement): void;
}
