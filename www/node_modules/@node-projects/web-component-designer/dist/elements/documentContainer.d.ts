import { BaseCustomWebComponentLazyAppend } from "@node-projects/base-custom-webcomponent";
import { DesignerView } from "./widgets/designerView/designerView";
import { ServiceContainer } from "./services/ServiceContainer";
import { InstanceServiceContainer } from "./services/InstanceServiceContainer";
import { ICodeView } from '../elements/widgets/codeView/ICodeView';
import { IDemoView } from './widgets/demoView/IDemoView';
import { IUiCommandHandler } from "../commandHandling/IUiCommandHandler";
import { IUiCommand } from "../commandHandling/IUiCommand";
import { IDisposable } from "../interfaces/IDisposable";
import { ISelectionChangedEvent } from "./services/selectionService/ISelectionChangedEvent.js";
export declare class DocumentContainer extends BaseCustomWebComponentLazyAppend implements IUiCommandHandler, IDisposable {
    designerView: DesignerView;
    codeView: ICodeView & HTMLElement;
    demoView: IDemoView & HTMLElement;
    additionalData: any;
    private _serviceContainer;
    private _content;
    private _tabControl;
    private _selectionPosition;
    private _splitDiv;
    private _designerDiv;
    private _codeDiv;
    private refreshInSplitViewDebounced;
    private _disableChangeNotificationDesigner;
    private _disableChangeNotificationEditor;
    static get style(): CSSStyleSheet;
    constructor(serviceContainer: ServiceContainer, content?: string);
    refreshInSplitView(): Promise<void>;
    designerSelectionChanged(e: ISelectionChangedEvent): void;
    designerContentChanged(): void;
    dispose(): void;
    executeCommand(command: IUiCommand): void;
    canExecuteCommand(command: IUiCommand): boolean;
    set content(value: string);
    get content(): string;
    ready(): void;
    get instanceServiceContainer(): InstanceServiceContainer;
}
