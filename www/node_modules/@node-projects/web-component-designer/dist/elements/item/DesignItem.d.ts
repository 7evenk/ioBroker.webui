import { ServiceContainer } from '../services/ServiceContainer';
import { IDesignItem } from './IDesignItem';
import { InstanceServiceContainer } from '../services/InstanceServiceContainer';
import { ChangeGroup } from '../services/undoService/ChangeGroup';
import { NodeType } from './NodeType';
import { ExtensionType } from '../widgets/designerView/extensions/ExtensionType';
import { IDesignerExtension } from '../widgets/designerView/extensions/IDesignerExtension';
import { ISize } from '../../interfaces/ISize.js';
export declare class DesignItem implements IDesignItem {
    lastContainerSize: ISize;
    node: Node;
    serviceContainer: ServiceContainer;
    instanceServiceContainer: InstanceServiceContainer;
    appliedDesignerExtensions: Map<ExtensionType, IDesignerExtension[]>;
    replaceNode(newNode: Node): void;
    get nodeType(): NodeType;
    get hasAttributes(): boolean;
    attributes: Map<string, string>;
    get hasStyles(): boolean;
    styles: Map<string, string>;
    private static _designItemMap;
    get element(): Element;
    get name(): string;
    get id(): string;
    set id(value: string);
    get isRootItem(): boolean;
    private _childArray;
    get hasChildren(): boolean;
    children(): IterableIterator<IDesignItem>;
    get childCount(): number;
    get firstChild(): IDesignItem;
    get parent(): IDesignItem;
    insertChild(designItem: IDesignItem, index?: number): void;
    removeChild(designItem: IDesignItem): void;
    remove(): void;
    clearChildren(): void;
    get hasContent(): boolean;
    get content(): string;
    set content(value: string);
    private _hideAtDesignTime;
    get hideAtDesignTime(): boolean;
    set hideAtDesignTime(value: boolean);
    private _hideAtRunTime;
    get hideAtRunTime(): boolean;
    set hideAtRunTime(value: boolean);
    private _lockAtDesignTime;
    get lockAtDesignTime(): boolean;
    set lockAtDesignTime(value: boolean);
    static createDesignItemFromInstance(node: Node, serviceContainer: ServiceContainer, instanceServiceContainer: InstanceServiceContainer): DesignItem;
    updateChildrenFromNodesChildren(): void;
    constructor(node: Node, serviceContainer: ServiceContainer, instanceServiceContainer: InstanceServiceContainer);
    openGroup(title: string, affectedItems?: IDesignItem[]): ChangeGroup;
    getOrCreateDesignItem(node: Node): IDesignItem;
    static GetOrCreateDesignItem(node: Node, serviceContainer: ServiceContainer, instanceServiceContainer: InstanceServiceContainer): IDesignItem;
    static GetDesignItem(node: Node): IDesignItem;
    setStyle(name: string, value?: string | null): void;
    removeStyle(name: string): void;
    setAttribute(name: string, value?: string | null): void;
    removeAttribute(name: string): void;
}
