import { ServiceContainer } from "../services/ServiceContainer";
import { InstanceServiceContainer } from '../services/InstanceServiceContainer';
import { ChangeGroup } from "../services/undoService/ChangeGroup";
import { NodeType } from './NodeType';
import { ExtensionType } from "../widgets/designerView/extensions/ExtensionType";
import { IDesignerExtension } from "../widgets/designerView/extensions/IDesignerExtension";
import { ISize } from "../../interfaces/ISize.js";
export interface IDesignItem {
    lastContainerSize: ISize;
    replaceNode(newNode: Node): any;
    readonly nodeType: NodeType;
    readonly name: string;
    id: string;
    readonly isRootItem: boolean;
    readonly hasAttributes: boolean;
    readonly attributes: Map<string, string>;
    readonly hasStyles: boolean;
    readonly styles: Map<string, string>;
    readonly hasChildren: boolean;
    children(): IterableIterator<IDesignItem>;
    readonly childCount: number;
    readonly firstChild: IDesignItem;
    readonly parent: IDesignItem;
    insertChild(designItem: IDesignItem, index?: number): any;
    removeChild(designItem: IDesignItem): any;
    remove(): any;
    clearChildren(): any;
    updateChildrenFromNodesChildren(): any;
    readonly hasContent: boolean;
    content: string;
    readonly node: Node;
    readonly element: Element;
    serviceContainer: ServiceContainer;
    instanceServiceContainer: InstanceServiceContainer;
    appliedDesignerExtensions: Map<ExtensionType, IDesignerExtension[]>;
    getOrCreateDesignItem(node: Node): any;
    openGroup(title: string, affectedItems?: IDesignItem[]): ChangeGroup;
    setStyle(name: string, value?: string | null): any;
    removeStyle(name: string): any;
    setAttribute(name: string, value?: string | null): any;
    removeAttribute(name: string): any;
    hideAtDesignTime: boolean;
    hideAtRunTime: boolean;
    lockAtDesignTime: boolean;
}
