import { sleep } from "@node-projects/web-component-designer/dist/elements/helper/Helper.js";
import { generateEventCodeFromBlockly } from "../blockly/BlocklyJavascriptHelper.js";
import { parseBindingString } from "../helpers/BindingsHelper.js";
import Long from 'long';
export class ScriptSystem {
    _visualizationHandler;
    constructor(visualizationHandler) {
        this._visualizationHandler = visualizationHandler;
    }
    async execute(scriptCommands, outerContext) {
        for (let c of scriptCommands) {
            this.runScriptCommand(c, outerContext);
        }
    }
    async runScriptCommand(command, context) {
        switch (command.type) {
            case 'OpenUrl': {
                window.open(await this.getValue(command.url, context), command.target);
                break;
            }
            case 'Delay': {
                const value = await this.getValue(command.value, context);
                await sleep(value);
                break;
            }
            case 'Console': {
                const target = await this.getValue(command.target, context);
                const message = await this.getValue(command.message, context);
                console[target](message);
                break;
            }
            case 'ToggleSignalValue': {
                const signal = await this.getValue(command.signal, context);
                let state = await this._visualizationHandler.getState(this.getSignaName(signal, context));
                await this._visualizationHandler.setState(this.getSignaName(signal, context), !state?.val);
                break;
            }
            case 'SetSignalValue': {
                const signal = await this.getValue(command.signal, context);
                await this._visualizationHandler.setState(this.getSignaName(signal, context), await this.getValue(command.value, context));
                break;
            }
            case 'IncrementSignalValue': {
                const signal = await this.getValue(command.signal, context);
                let state = await this._visualizationHandler.getState(this.getSignaName(signal, context));
                await this._visualizationHandler.setState(this.getSignaName(signal, context), state.val + await this.getValue(command.value, context));
                break;
            }
            case 'DecrementSignalValue': {
                const signal = await this.getValue(command.signal, context);
                let state = await this._visualizationHandler.getState(this.getSignaName(signal, context));
                await this._visualizationHandler.setState(this.getSignaName(signal, context), state.val - await this.getValue(command.value, context));
                break;
            }
            case 'CalculateSignalValue': {
                const formula = await this.getValue(command.formula, context);
                const targetSignal = await this.getValue(command.targetSignal, context);
                let nm = await this.parseStringWithValues(formula, context);
                let result = eval(nm);
                await this._visualizationHandler.setState(this.getSignaName(targetSignal, context), result);
                break;
            }
            case 'SetBitInSignal': {
                const signal = await this.getValue(command.signal, context);
                let state = await this._visualizationHandler.getState(this.getSignaName(signal, context));
                let mask = Long.fromNumber(1).shiftLeft(command.bitNumber);
                const newVal = Long.fromNumber(state.val).or(mask).toNumber();
                await this._visualizationHandler.setState(this.getSignaName(signal, context), newVal);
                break;
            }
            case 'ClearBitInSignal': {
                const signal = await this.getValue(command.signal, context);
                let state = await this._visualizationHandler.getState(this.getSignaName(signal, context));
                let mask = Long.fromNumber(1).shiftLeft(command.bitNumber);
                mask.negate();
                const newVal = Long.fromNumber(state.val).and(mask).toNumber();
                await this._visualizationHandler.setState(this.getSignaName(signal, context), newVal);
                break;
            }
            case 'ToggleBitInSignal': {
                const signal = await this.getValue(command.signal, context);
                let state = await this._visualizationHandler.getState(this.getSignaName(signal, context));
                let mask = Long.fromNumber(1).shiftLeft(command.bitNumber);
                const newVal = Long.fromNumber(state.val).xor(mask).toNumber();
                await this._visualizationHandler.setState(this.getSignaName(signal, context), newVal);
                break;
            }
            case 'Javascript': {
                const script = await this.getValue(command.script, context);
                let mycontext = context;
                mycontext.shadowRoot = context.element.getRootNode();
                mycontext.instance = context.shadowRoot.host;
                if (!command.compiledScript)
                    command.compiledScript = new Function('context', script);
                command.compiledScript(mycontext);
                break;
            }
            case 'SetElementProperty': {
                const name = await this.getValue(command.name, context);
                const value = await this.getValue(command.value, context);
                let host = context.element.getRootNode().host;
                if (command.targetSelectorTarget == 'currentElement')
                    host = context.element;
                else if (command.targetSelectorTarget == 'parentElement')
                    host = context.element.parentElement;
                else if (command.targetSelectorTarget == 'parentScreen')
                    host = host.getRootNode().host;
                let elements = [host];
                if (command.targetSelector)
                    elements = host.shadowRoot.querySelectorAll(command.targetSelector);
                for (let e of elements) {
                    if (command.target == 'attribute') {
                        e.setAttribute(name, value);
                    }
                    else if (command.target == 'property') {
                        e[name] = value;
                    }
                    else if (command.target == 'css') {
                        e.style[name] = value;
                    }
                }
                break;
            }
        }
    }
    async getValue(value, outerContext) {
        if (typeof value === 'object') {
            switch (value.source) {
                case 'property': {
                    return outerContext.root[value.name];
                }
                case 'signal': {
                    let sng = await this._visualizationHandler.getState(this.getSignaName(value.name, outerContext));
                    return sng.val;
                }
                case 'event': {
                    let obj = outerContext.event;
                    if (value.name)
                        obj = ScriptSystem.extractPart(obj, value.name);
                    return obj;
                }
                case 'parameter': {
                    return outerContext.parameters[value.name];
                }
                case 'complexString': {
                    let text = value.name;
                    if (text != null) {
                        return await this.parseStringWithValues(text, outerContext);
                    }
                    return null;
                }
                case 'complexSignal': {
                    let text = value.name;
                    if (text != null) {
                        const signal = await this.parseStringWithValues(text, outerContext);
                        return await this._visualizationHandler.getState(this.getSignaName(signal, outerContext));
                    }
                    return null;
                }
            }
        }
        return value;
    }
    async getStateOrFieldOrParameter(name, context) {
        //use same shortcuts as in bindings. $ = signals object, ยง = access context
        if (name[0] === 'ยง') {
            //@ts-ignore
            var ctx = context;
            return eval('ctx.' + name.substring(1));
        }
        return await this._visualizationHandler.getState(this.getSignaName(name, context));
    }
    async parseStringWithValues(text, context) {
        const parsed = parseBindingString(text);
        let results = await Promise.all(parsed.signals.map(x => this.getStateOrFieldOrParameter(this.getSignaName(x, context), context)));
        let nm = '';
        for (let i = 0; i < parsed.parts.length - 1; i++) {
            let v = results[i].val;
            if (v == null)
                v = '';
            nm += v + parsed.parts[i + 1];
        }
        return nm;
    }
    getSignaName(name, outerContext) {
        if (name[0] === '.')
            return outerContext.relativeSignalsPath + name;
        return name;
    }
    static extractPart(obj, propertyPath) {
        let retVal = obj;
        for (let p of propertyPath.split('.')) {
            retVal = retVal?.[p];
        }
        return retVal;
    }
    async assignAllScripts(source, javascriptCode, shadowRoot, instance, assignExternalScript) {
        const allElements = shadowRoot.querySelectorAll('*');
        let jsObject = null;
        if (javascriptCode) {
            try {
                const scriptUrl = URL.createObjectURL(new Blob([javascriptCode], { type: 'application/javascript' }));
                jsObject = await import(scriptUrl);
                if (jsObject.init) {
                    jsObject.init(instance);
                }
            }
            catch (err) {
                console.error('error parsing javascript - ' + source, err);
            }
        }
        for (let e of allElements) {
            for (let a of e.attributes) {
                if (a.name[0] == '@') {
                    try {
                        let evtName = a.name.substring(1);
                        let script = a.value.trim();
                        if (script[0] == '{') {
                            let scriptObj = JSON.parse(script);
                            if ('commands' in scriptObj) {
                                e.addEventListener(evtName, (evt) => this.execute(scriptObj.commands, { event: evt, element: e, root: instance, parameters: scriptObj.parameters, relativeSignalsPath: scriptObj.relativeSignalsPath }));
                            }
                            else if ('blocks' in scriptObj) {
                                let compiledFunc = null;
                                e.addEventListener(evtName, async (evt) => {
                                    if (!compiledFunc)
                                        compiledFunc = await generateEventCodeFromBlockly(scriptObj);
                                    compiledFunc(evt, shadowRoot, scriptObj.parameters, scriptObj.relativeSignalsPath ?? '');
                                });
                            }
                            else {
                                if (assignExternalScript)
                                    assignExternalScript(e, evtName, scriptObj);
                                else {
                                    if ('name' in scriptObj) {
                                        //@ts-ignore
                                        const nm = scriptObj.name;
                                        e.addEventListener(evtName, (evt) => {
                                            if (!jsObject[nm])
                                                console.warn('javascript function named: ' + nm + ' not found, maybe missing a "export" ?');
                                            else
                                                jsObject[nm](evt, e, shadowRoot, instance, scriptObj.parameters);
                                        });
                                    }
                                }
                            }
                        }
                        else {
                            e.addEventListener(evtName, (evt) => {
                                if (!jsObject[script])
                                    console.warn('javascript function named: ' + script + ' not found, maybe missing a "export" ?');
                                else
                                    jsObject[script](evt, e, shadowRoot, instance);
                            });
                        }
                    }
                    catch (err) {
                        console.warn('error assigning script', e, a);
                    }
                }
            }
        }
        return jsObject;
    }
}
