/// <reference types="iobroker" />
import { Connection, RequestOptions } from "./Connection.js";
import type { ConnectionProps } from "./ConnectionProps.js";
import type { AdminEmitEvents, AdminListenEvents, CompactAdapterInfo, CompactHost, CompactInstalledInfo, CompactInstanceInfo, CompactRepository, LogFile } from "./SocketEvents.js";
interface Certificate {
    name: string;
    type: "public" | "private" | "chained";
}
export interface IPAddress {
    name: string;
    address: string;
    family: "ipv4" | "ipv6";
}
export declare class AdminConnection extends Connection<AdminListenEvents, AdminEmitEvents> {
    constructor(props: ConnectionProps);
    protected request<T>(options: RequestOptions<T>): Promise<T>;
    /**
     * Get the stored certificates.
     * @param update Force update.
     */
    getCertificates(update?: boolean): Promise<Certificate[]>;
    /**
     * Get the logs from a host (only for admin connection).
     * @param host
     * @param linesNumber
     */
    getLogs(host: string, linesNumber?: number): Promise<string[]>;
    /**
     * Get the log files (only for admin connection).
     */
    getLogsFiles(host: string): Promise<LogFile[]>;
    /**
     * Delete the logs from a host (only for admin connection).
     */
    delLogs(host: string): Promise<void>;
    /**
     * Delete a file of an adapter.
     * @param adapter The adapter name.
     * @param fileName The file name.
     */
    deleteFile(adapter: string, fileName: string): Promise<void>;
    /**
     * Delete a folder of an adapter.
     * @param adapter The adapter name.
     * @param folderName The folder name.
     */
    deleteFolder(adapter: string, folderName: string): Promise<void>;
    /**
     * Get the list of all hosts.
     * @param update Force update.
     */
    getHosts(update?: boolean): Promise<ioBroker.HostObject[]>;
    /**
     * Get the list of all users.
     * @param update Force update.
     */
    getUsers(update?: boolean): Promise<ioBroker.UserObject[]>;
    /**
     * Get the list of all groups.
     * @param update Force update.
     */
    getGroups(update?: boolean): Promise<ioBroker.GroupObject[]>;
    /**
     * Rename a group.
     * @param id The id.
     * @param newId The new id.
     * @param newName The new name.
     */
    renameGroup(id: string, newId: string, newName: ioBroker.StringOrTranslated): Promise<void>;
    /**
     * Get the host information.
     * @param host
     * @param update Force update.
     * @param timeoutMs optional read timeout.
     */
    getHostInfo(host: string, update?: boolean, timeoutMs?: number): Promise<any>;
    /**
     * Get the host information (short version).
     * @param host
     * @param update Force update.
     * @param timeoutMs optional read timeout.
     */
    getHostInfoShort(host: string, update?: boolean, timeoutMs?: number): Promise<any>;
    /**
     * Get the repository.
     * @param host
     * @param args
     * @param update Force update.
     * @param timeoutMs timeout in ms.
     */
    getRepository(host: string, args: any, update?: boolean, timeoutMs?: number): Promise<any>;
    /**
     * Get the installed.
     * @param host
     * @param update Force update.
     * @param cmdTimeout timeout in ms
     */
    getInstalled(host: string, update?: boolean, cmdTimeout?: number): Promise<any>;
    /**
     * Execute a command on a host.
     * @param host The host name.
     * @param cmd The command.
     * @param cmdId The command ID.
     * @param cmdTimeout Timeout of command in ms
     */
    cmdExec(host: string, cmd: string, cmdId: string, cmdTimeout?: number): Promise<void>;
    /**
     * Read the base settings of a given host.
     * @param host
     */
    readBaseSettings(host: string): Promise<any>;
    /**
     * Write the base settings of a given host.
     * @param host
     * @param config
     */
    writeBaseSettings(host: string, config: any): Promise<any>;
    /**
     * Send command to restart the iobroker on host
     * @param host
     */
    restartController(host: string): Promise<true>;
    /**
     * Read statistics information from host
     * @param host
     * @param typeOfDiag one of none, normal, no-city, extended
     */
    getDiagData(host: string, typeOfDiag: string): Promise<any>;
    /**
     * Change the password of the given user.
     * @param user
     * @param password
     */
    changePassword(user: string, password: string): Promise<void>;
    /**
     * Get the IP addresses of the given host.
     * @param host
     * @param update Force update.
     */
    getIpAddresses(host: string, update?: boolean): Promise<string[]>;
    /**
     * Get the IP addresses with interface names of the given host or find host by IP.
     * @param ipOrHostName
     * @param update Force update.
     */
    getHostByIp(ipOrHostName: string, update?: boolean): Promise<IPAddress[]>;
    /**
     * Encrypt a text
     * @param plaintext
     */
    encrypt(plaintext: string): Promise<string>;
    /**
     * Decrypt a text
     * @param ciphertext
     */
    decrypt(ciphertext: string): Promise<string>;
    /**
     * Change access rights for file
     * @param adapter adapter name
     * @param filename file name with full path. it could be like vis.0/*
     * @param options like {mode: 0x644}
     */
    chmodFile(adapter: string | null, path: string, options?: {
        mode: number | string;
    }): Promise<ioBroker.ChownFileResult[]>;
    /**
     * Change owner or/and owner group for file
     * @param adapter adapter name
     * @param filename file name with full path. it could be like vis.0/*
     * @param options like {owner: 'newOwner', ownerGroup: 'newGroup'}
     */
    chownFile(adapter: string, filename: string, options?: {
        owner: string;
        ownerGroup: string;
    }): Promise<ioBroker.ChownFileResult[]>;
    /**
     * Get the alarm notifications from a host (only for admin connection).
     * @param host
     * @param category - optional
     */
    getNotifications(host: string, category: string): Promise<any>;
    /**
     * Clear the alarm notifications on a host (only for admin connection).
     * @param host
     * @param category - optional
     */
    clearNotifications(host: string, category: string): Promise<any>;
    /**
     * Read if only easy mode is allowed  (only for admin connection).
     */
    getIsEasyModeStrict(): Promise<boolean>;
    /**
     * Read easy mode configuration (only for admin connection).
     */
    getEasyMode(): Promise<any>;
    /**
     * Read adapter ratings
     */
    getRatings(update?: boolean): Promise<any>;
    getCurrentSession(cmdTimeout?: number): any;
    /**
     * Read current web, socketio or admin namespace, like admin.0
     */
    getCurrentInstance(): Promise<string>;
    /**
     * Get all adapter instances.
     * @param update Force update.
     */
    /**
     * Get all instances of the given adapter.
     * @param adapter The name of the adapter.
     * @param update Force update.
     */
    getAdapterInstances(adapter?: string, update?: boolean): Promise<ioBroker.InstanceObject[]>;
    /**
     * Get all adapters.
     * @param update Force update.
     */
    /**
     * Get adapters with the given name.
     * @param adapter The name of the adapter.
     * @param update Force update.
     */
    getAdapters(adapter?: string, update?: boolean): Promise<ioBroker.AdapterObject[]>;
    getCompactAdapters(update?: boolean): Promise<Record<string, CompactAdapterInfo>>;
    getCompactInstances(update?: boolean): Promise<Record<string, CompactInstanceInfo>>;
    getCompactInstalled(host: string, update?: boolean, cmdTimeout?: number): Promise<CompactInstalledInfo>;
    /**
     * Get the repository in compact form (only version and icon).
     * @param host
     * @param update Force update.
     * @param timeoutMs timeout in ms.
     */
    getCompactRepository(host: string, update?: boolean, timeoutMs?: number): Promise<CompactRepository>;
    /**
     * Get the list of all hosts in compact form (only _id, common.name, common.icon, common.color, native.hardware.networkInterfaces)
     * @param update Force update.
     */
    getCompactHosts(update?: boolean): Promise<CompactHost[]>;
}
export {};
