export function getObjectViewResultToArray(doc) {
    var _a;
    return ((_a = doc === null || doc === void 0 ? void 0 : doc.rows.map((item) => item.value).filter((val) => !!val)) !== null && _a !== void 0 ? _a : []);
}
/** Makes sure that a host id starts with "system.host." */
export function normalizeHostId(host) {
    if (!(host === null || host === void 0 ? void 0 : host.startsWith("system.host."))) {
        host = `system.host.${host}`;
    }
    return host;
}
export function objectIdToHostname(id) {
    if (id === null || id === void 0 ? void 0 : id.startsWith("system.host.")) {
        id = id.substr("system.host.".length);
    }
    return id;
}
/**
 * Creates a promise that waits for the specified time and then resolves
 */
export function wait(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}
/** Converts ioB pattern into regex */
export function pattern2RegEx(pattern) {
    pattern = (pattern || "").toString();
    const startsWithWildcard = pattern[0] === "*";
    const endsWithWildcard = pattern[pattern.length - 1] === "*";
    pattern = pattern
        .replace(/[-/\\^$+?.()|[\]{}]/g, "\\$&")
        .replace(/\*/g, ".*");
    return ((startsWithWildcard ? "" : "^") +
        pattern +
        (endsWithWildcard ? "" : "$"));
}
//# sourceMappingURL=tools.js.map