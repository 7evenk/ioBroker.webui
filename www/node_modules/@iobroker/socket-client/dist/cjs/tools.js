"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var tools_exports = {};
__export(tools_exports, {
  getObjectViewResultToArray: () => getObjectViewResultToArray,
  normalizeHostId: () => normalizeHostId,
  objectIdToHostname: () => objectIdToHostname,
  pattern2RegEx: () => pattern2RegEx,
  wait: () => wait
});
module.exports = __toCommonJS(tools_exports);
function getObjectViewResultToArray(doc) {
  var _a;
  return (_a = doc === null || doc === void 0 ? void 0 : doc.rows.map((item) => item.value).filter((val) => !!val)) !== null && _a !== void 0 ? _a : [];
}
function normalizeHostId(host) {
  if (!host.startsWith("system.host.")) {
    host = `system.host.${host}`;
  }
  return host;
}
function objectIdToHostname(id) {
  if (id.startsWith("system.host.")) {
    id = id.substr("system.host.".length);
  }
  return id;
}
function wait(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}
function pattern2RegEx(pattern) {
  pattern = (pattern || "").toString();
  const startsWithWildcard = pattern[0] === "*";
  const endsWithWildcard = pattern[pattern.length - 1] === "*";
  pattern = pattern.replace(/[-/\\^$+?.()|[\]{}]/g, "\\$&").replace(/\*/g, ".*");
  return (startsWithWildcard ? "" : "^") + pattern + (endsWithWildcard ? "" : "$");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getObjectViewResultToArray,
  normalizeHostId,
  objectIdToHostname,
  pattern2RegEx,
  wait
});
//# sourceMappingURL=tools.js.map
